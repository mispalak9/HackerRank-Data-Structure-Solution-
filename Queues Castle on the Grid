from collections import deque

def minimumMoves(grid, startX, startY, goalX, goalY):
    n = len(grid)
    # Directions for moving in the grid: right, left, down, up
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    
    # Queue for BFS: (x, y, moves)
    queue = deque([(startX, startY, 0)])
    visited = [[False] * n for _ in range(n)]
    visited[startX][startY] = True
    
    while queue:
        x, y, moves = queue.popleft()
        
        # Check if we reached the goal
        if x == goalX and y == goalY:
            return moves
        
        # Explore all four directions
        for dx, dy in directions:
            nx, ny = x, y
            
            # Move in the current direction until hitting a wall or edge
            while 0 <= nx + dx < n and 0 <= ny + dy < n and grid[nx + dx][ny + dy] == '.':
                nx += dx
                ny += dy
                
                if not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny, moves + 1))
    
    return -1  # If the goal is unreachable

# Example usage
if __name__ == '__main__':
    n = int(input().strip())
    grid = [input().strip() for _ in range(n)]
    startX, startY, goalX, goalY = map(int, input().strip().split())
    
    result = minimumMoves(grid, startX, startY, goalX, goalY)
    print(result)
