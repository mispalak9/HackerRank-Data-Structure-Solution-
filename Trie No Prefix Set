class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False  # Indicates if a word ends at this node

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        current = self.root
        for i, char in enumerate(word):
            if char not in current.children:
                current.children[char] = TrieNode()
            current = current.children[char]
            # If we reach a node that is already the end of another word, it's a BAD SET
            if current.is_end_of_word:
                return False
        # Mark the end of the word
        current.is_end_of_word = True
        # If there are children, it means this word is a prefix of another
        if current.children:
            return False
        return True

def noPrefix(words):
    trie = Trie()
    
    for word in words:
        if not trie.insert(word):
            print("BAD SET")
            print(word)
            return
    
    print("GOOD SET")

# Example usage
if __name__ == '__main__':
    n = int(input().strip())  # Read the number of words
    words = [input().strip() for _ in range(n)]  # Read the words

    noPrefix(words)  # Call the function
