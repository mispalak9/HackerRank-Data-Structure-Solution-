class TrieNode:
    def __init__(self):
        self.children = {}
        self.count = 0  # Count of words that pass through this node

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def add(self, word):
        current = self.root
        for char in word:
            if char not in current.children:
                current.children[char] = TrieNode()
            current = current.children[char]
            current.count += 1  # Increment count for each node in the path

    def find(self, prefix):
        current = self.root
        for char in prefix:
            if char not in current.children:
                return 0  # If the prefix is not found, return 0
            current = current.children[char]
        return current.count  # Return the count of words with this prefix

def contacts(queries):
    trie = Trie()
    results = []

    for query in queries:
        operation, name = query.split()
        if operation == "add":
            trie.add(name)
        elif operation == "find":
            results.append(trie.find(name))

    return results

# Example usage
if __name__ == '__main__':
    n = int(input().strip())  # Read the number of operations
    queries = [input().strip() for _ in range(n)]  # Read the operations

    result = contacts(queries)  # Call the function
    for res in result:
        print(res)  # Print the results for each find operation
